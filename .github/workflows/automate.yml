# defining the name of the workflow (Containerizing the Image and deploying it to ECS) ==> Continuous Delivery
name: CI/CD Pipeline

# specifying this workflow will get triggered if we push anything to the main branch
on:
  push:
    branches:
       - main

# adding environment variables
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: news_article_search_engine
  CONTAINER_NAME: news_article_search_engine


# defining the jobs
jobs:
  # defining Continous integration which tested our application when any push happens
  Continous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r requirements.txt
      
      - name: Run tests with pytest
        run: pytest test.py

  # defining Continuous delivery which builds and pushes docker image to AWS ECR
  Continous-Delivery:
    needs: Continous-Integration
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # Add the provided lines here
      - name: Print AWS Secrets
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.AWS_REGION }}
      
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          region:  ${{env.AWS_REGION}}
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        
      - name: Build, tag, push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image = $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  # defining Continuous deployment which pulls docker image from AWS ECR and pushes it to the EC2 instance
  Continous-Deployment:
    needs: Continous-Delivery
    runs-on: self-hosted
    environment: production
    steps:
      
      - name: Deploy docker image from ECR to EC2 instance
        id: deploy-image
        env:
          ECR_REGISTRY: 851725554615.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: propensity_flask_app
          IMAGE_TAG: ${{ github.sha }}
          
        run: |
          whoami
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          echo "ECR_REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE_TAG: $IMAGE_TAG"
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 851725554615.dkr.ecr.us-east-1.amazonaws.com
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          docker run -d -p 5000:5000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker system prune -f